/**
 * Accessing enum values
 */


/**
 * How to access information from an enum
 */

/**
 * The following topics are covered:
 *   1. TypeScript map objects to allow data access
 *   2. The JavaScript output
 */


/**
 * TypeScript map objects to allow access
 */

/**
 * A variable set with an 'enum' that has a 'number' lets you access the 'enum' name from the
 *   integer. However, an 'enum' with string values does not have this capability.
 *   This means you can use the 'enum' name followed by the name of the constant to get the value.
 *   Also, with the number, you can use the value to return the name.
 */

/**
 * For example, an 'enum' called 'Orientation' with 'East', 'West', 'North', and 'South' could
 *   use 'Orientation.East' to get the value zero or use 'Orientation[0]' to get 'East'.
 *   This works because TypeScript generates a map object which gives you access using the name
 *   of the entry or the value.
 */

/**
 * Here is the generated code of the orientation 'enum':
 */

enum Orientation {
  East, West, North, South,
}
let directionNumber = Orientation.East;  // Access with the enum
let directionString = Orientation[0];  // Access the snum string using an index
console.log(directionNumber);
console.log(directionString);

/**
 * As mentioned, it is not possible with an enum that has strings for value. The following
 *   code does not compile because lines 8 and 9 wrongly accessed the enum.
 */

enum OrientationString {
  East = "E",
  West = "W",
  North = "N",
  South = "S",
}
let directionNumber2 = OrientationString.East;  // Access with the enum
// let directionString2 = OrientationString[0];  // Access the enum string using an index -- Doesn't compile
// let directionString3 = OrientationString["E"];  // Access the enum string using an index -- Doesn't compile
console.log(directionNumber2);
// console.log(directionString2);  // Doesn't compile
// console.log(directionString3);  // Doesn't compile


/**
 * The JavaScript output
 */

/**
 * The JavaScript output looks like the following for the first valid example:
 */

// let Orientation2;
// (function (Orientation2) {
//   Orientation2[Orientation2["East"] = 0] = "East";
//   Orientation2[Orientation2["West"] = 1] = "West";
//   Orientation2[Orientation2["North"] = 2] = "North";
//   Orientation2[Orientation2["South"] = 3] = "South";
// })(Orientation2 || (Orientation2 = {}));
// let directionNumber4 = Orientation.East;
// let directionString4 = Orientation[0];
// console.table(Orientation);

/**
 * The JavaScript code generated by TypeScript creates a closure that assigns to a variable
 *   ('Orientation') the four possible values by number as well as with string.
 *   The 'Orientation' variable is an array with eight elements. The code on line 10 added
 *   an output that demonstrates how the values are accessible either way.
 */


export {};